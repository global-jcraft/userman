version: 2.1

executors:
  java-docker:
    docker:
      - image: cimg/openjdk:17.0

  docker-executor:
    docker:
      - image: cimg/openjdk:17.0 # Primary container with Java
      - image: cimg/base:2022.09     # Additional service container for Docker CLI
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    working_directory: ~/project

  base-executor:
    docker:
      - image: cimg/base:stable

  snyk-cli-executor:
    docker:
      - image: snyk/snyk-cli:docker
      - image: cimg/openjdk:17.0

jobs:
  build:
    executor: java-docker
    steps:
      - checkout
      - run:
          name: Build the Project
          command: ./gradlew build

  unit-tests:
    executor: java-docker
    steps:
      - checkout
      - run:
          name: Run Unit Tests
          command: ./gradlew test
      - store_test_results:
          path: build/test-results/test

  spotless:
    executor: java-docker
    steps:
      - checkout
      - run:
          name: Check and Apply Formatting with Spotless
          command: |
            ./gradlew spotlessCheck || (echo "Spotless check failed. Fixing issues..." && ./gradlew spotlessApply)

  code-quality:
    executor: java-docker
    steps:
      - checkout
      - run:
          name: Run SonarQube Analysis
          command: gradle build sonarqube

  package:
    executor: java-docker
    steps:
      - checkout
      - run:
          name: Package the Application
          command: ./gradlew clean bootJar
      - persist_to_workspace:
          root: build/libs/
          paths:
            - '*.jar'

  docker-build:
    executor: docker-executor
    steps:
      - checkout
      - attach_workspace:
          at: build/libs/
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Prepare Version
          command: |
            VERSION=$(./gradlew properties -q | grep "^version:" | awk '{print $2}')
            VERSION=${VERSION:-1.0.0}  # Use default version 1.0.0 if empty
            echo "Using version: $VERSION"
            echo "VERSION=$VERSION" >> version.env
      - run:
          name: Build Docker Image
          command: |
            source version.env
            docker build --build-arg VERSION=$VERSION -t ${DOCKER_USERNAME}/jcraft-userman:$VERSION .
      - run:
          name: Push Docker Image
          command: |
            source version.env
            echo "Pushing image: ${DOCKER_USERNAME}/jcraft-userman:$VERSION"
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            docker push ${DOCKER_USERNAME}/jcraft-userman:$VERSION

  snyk-dependency-test:
    executor: snyk-cli-executor
    steps:
      - checkout
      - run:
          name: Authenticate with Snyk
          command: snyk auth $SNYK_TOKEN
      - run:
          name: Run Snyk Dependency Test
          command: snyk test --file=build.gradle --severity-threshold=medium --skip-unresolved
      - run:
          name: Monitor Dependencies
          command: snyk monitor --all-projects

  deploy-develop:
    executor: base-executor
    steps:
      - run:
          name: Deploy to Staging
          command: |
            if [ -f ./scripts/deploy.sh ]; then
              ./scripts/deploy.sh staging
            else
              echo "Warning: ./scripts/deploy.sh not found. Skipping deployment to staging."
            fi

  deploy-production:
    executor: base-executor
    steps:
      - run:
          name: Deploy to Production
          command: |
            if [ -f ./scripts/deploy.sh ]; then
              ./scripts/deploy.sh production
            else
              echo "Warning: ./scripts/deploy.sh not found. Skipping deployment to production."
            fi

workflows:
  build-test-deploy:
    jobs:
      - build
      - spotless:
          requires:
            - build
      - unit-tests:
          requires:
            - build
      - code-quality:
          requires:
            - build
          context: SonarCloud
      - package:
          requires:
            - unit-tests
      - docker-build:
          requires:
            - package
          filters:
            branches:
              only:
                - develop
      - snyk-dependency-test:
          requires:
            - package
      - deploy-develop:
          requires:
            - docker-build
          filters:
            branches:
              only:
                - develop
      - deploy-production:
          requires:
            - deploy-develop
          filters:
            branches:
              only:
                - master
