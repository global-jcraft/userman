version: 2.1

orbs:
  snyk: snyk/snyk@2.2.0

executors:
  java-docker:
    docker:
      - image: cimg/openjdk:17.0
    resource_class: medium+

  docker-executor:
    docker:
      - image: cimg/openjdk:17.0 # Primary container with Java
      - image: cimg/base:2022.09     # Additional service container for Docker CLI
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    working_directory: ~/project

  base-executor:
    docker:
      - image: cimg/base:stable

jobs:
  build:
    executor: java-docker
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build the Project
          command:  |
            # Set testcontainers properties
            export TESTCONTAINERS_RYUK_DISABLED=true
            export TESTCONTAINERS_CHECKS_DISABLE=true
            
            ./gradlew build

  unit-tests:
    executor: java-docker
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Run Unit Tests
          command:  |
            # Set testcontainers properties
            export TESTCONTAINERS_RYUK_DISABLED=true
            export TESTCONTAINERS_CHECKS_DISABLE=true
            
            ./gradlew test --info
      - store_test_results:
          path: build/test-results/test
      - store_artifacts:
          path: build/reports/tests
          destination: test-reports

  spotless:
    executor: java-docker
    steps:
      - checkout
      - run:
          name: Check and Apply Formatting with Spotless
          command: |
            ./gradlew spotlessCheck || (echo "Spotless check failed. Fixing issues..." && ./gradlew spotlessApply)

  code-quality:
    executor: java-docker
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Run SonarQube Analysis
          command: |
            export TESTCONTAINERS_RYUK_DISABLED=true
            export TESTCONTAINERS_CHECKS_DISABLE=true
            
            gradle build sonarqube

  package:
    executor: java-docker
    steps:
      - checkout
      - run:
          name: Package the Application
          command: ./gradlew clean bootJar
      - persist_to_workspace:
          root: build/libs/
          paths:
            - '*.jar'

  docker-build:
    executor: docker-executor
    steps:
      - checkout
      - attach_workspace:
          at: build/libs/
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Prepare Version
          command: |
            VERSION=$(./gradlew properties -q | grep "^version:" | awk '{print $2}')
            VERSION=${VERSION:-1.0.0}  # Use default version 1.0.0 if empty
            echo "Using version: $VERSION"
            mkdir -p workspace
            echo "VERSION=$VERSION" >> workspace/version.env
      - run:
          name: Build Docker Image
          command: |
            source workspace/version.env
            docker build --build-arg VERSION=$VERSION -t ${DOCKER_USERNAME}/jcraft-userman:$VERSION .
      - run:
          name: Push Docker Image
          command: |
            source workspace/version.env
            echo "Pushing image: ${DOCKER_USERNAME}/jcraft-userman:$VERSION"
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            docker push ${DOCKER_USERNAME}/jcraft-userman:$VERSION
      - persist_to_workspace:
          root: workspace
          paths:
            - version.env

  snyk-scan:
    executor: docker-executor
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Load Version
          command: |
            if [ ! -f workspace/version.env ]; then
              echo "Error: version.env not found in workspace"
              ls -la workspace/
              exit 1
            fi
            source workspace/version.env
            echo "VERSION=$VERSION" >> $BASH_ENV
            source $BASH_ENV
            echo "Loaded version: $VERSION"
      - run:
          name: Docker Login
          command: |
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
      - run:
          name: Pull Docker Image
          command: |
            docker pull ${DOCKER_USERNAME}/jcraft-userman:$VERSION
      - run:
          name: Create reports directory
          command: mkdir -p ~/reports/snyk
      - run:
          name: Generate Report Header
          command: |
            echo "Running Snyk security scan at $(date)" > ~/reports/snyk/security-report.txt
            echo "================================================" >> ~/reports/snyk/security-report.txt
            echo "Docker Image: ${DOCKER_USERNAME}/jcraft-userman:$VERSION" >> ~/reports/snyk/security-report.txt
            echo "================================================" >> ~/reports/snyk/security-report.txt
      - snyk/scan:
          token-variable: SNYK_TOKEN
          docker-image-name: "${DOCKER_USERNAME}/jcraft-userman:$VERSION"
          target-file: "Dockerfile"
          additional-arguments: "--json-file-output=~/reports/snyk/scan.json || true"
      - run:
          name: Format Scan Results
          command: |
            if [ -f ~/reports/snyk/scan.json ]; then
              echo -e "\nDetailed Scan Results:" >> ~/reports/snyk/security-report.txt
              cat ~/reports/snyk/scan.json | jq -r '.vulnerabilities[] | "Vulnerability: \(.title)\nSeverity: \(.severity)\nPackage: \(.package)\nVersion: \(.version)\nFixed In: \(.fixedIn)\nDescription: \(.description)\n---"' >> ~/reports/snyk/security-report.txt 2>/dev/null || echo "No vulnerabilities found" >> ~/reports/snyk/security-report.txt
            else
              echo -e "\nNo scan results found" >> ~/reports/snyk/security-report.txt
            fi
            
            echo -e "\nScan completed at $(date)" >> ~/reports/snyk/security-report.txt
      - store_artifacts:
          path: ~/reports/snyk
          destination: snyk-reports

  deploy-develop:
    executor: base-executor
    steps:
      - run:
          name: Deploy to Staging
          command: |
            if [ -f ./scripts/deploy.sh ]; then
              ./scripts/deploy.sh staging
            else
              echo "Warning: ./scripts/deploy.sh not found. Skipping deployment to staging."
            fi

  deploy-production:
    executor: base-executor
    steps:
      - run:
          name: Deploy to Production
          command: |
            if [ -f ./scripts/deploy.sh ]; then
              ./scripts/deploy.sh production
            else
              echo "Warning: ./scripts/deploy.sh not found. Skipping deployment to production."
            fi

workflows:
  build-test-deploy:
    jobs:
      - build
      - spotless:
          requires:
            - build
      - unit-tests:
          requires:
            - build
      - code-quality:
          requires:
            - build
          context: SonarCloud
      - package:
          requires:
            - unit-tests
      - docker-build:
          requires:
            - package
          filters:
            branches:
              only:
                - develop
      - snyk-scan:
          requires:
            - docker-build
          filters:
            branches:
              only:
                - develop
      - deploy-develop:
          requires:
            - docker-build
            - snyk-scan
          filters:
            branches:
              only:
                - develop
      - deploy-production:
          requires:
            - deploy-develop
          filters:
            branches:
              only:
                - master
